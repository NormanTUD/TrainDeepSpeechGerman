Bootstrap: docker
From: ubuntu:16.04
%labels
maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"
com.nvidia.volumes.needed="nvidia_driver"
com.nvidia.cuda.version="${CUDA_VERSION}"
%post
    echo "#!/bin/bash" >> /bin/mypip
    #echo 'pip3 install --cache-dir=/pip $*' >> /bin/mypip
    echo 'pip3 install $*' >> /bin/mypip
    chmod +x /bin/mypip

    echo 'Acquire::http { Proxy "http://192.168.0.132:3142"; };' > /etc/apt/apt.conf.d/02proxy
    cat /etc/apt/apt.conf.d/02proxy
    apt-get update && apt-get install -y --no-install-recommends ca-certificates apt-transport-https gnupg-curl

    apt-get -y install python-dev
    apt-get -y install python3-dev


    apt-get -y install python3-numpy python3-dev python3-pip python3-wheel sed

    python3 -m pip install --upgrade pip setuptools

    #mypip pandas==0.25.3 -v
    mypip pandas

    apt-get -y install gcc build-essential cmake python3-dev cmake uuid-dev git libsox-fmt-mp3 sox python3 python3-pip python3-alembic alembic wget

    mypip virtualenv h5py pyyaml requests Pillow scipy keras
    mypip futures==3.1.1
    mypip sox
    mypip progressbar2
    mypip 'tensorflow-gpu==1.15.2'
    mypip --upgrade pip==20.0.2 wheel==0.34.2 setuptools==46.1.3

    mkdir /ds/

    git clone --depth 1 https://github.com/mozilla/DeepSpeech /ds/
    #mypip -r /ds/requirement.txt
    #python3 /ds/util/taskcluster.py --decoder > /ds/toinstall.txt
    #mypip -r /ds/toinstall.txt

    wget https://raw.githubusercontent.com/lissyx/taskcluster-github-decision/master/requirements.txt -O /ds/requirements.txt

    sed -i 's/pandas==0.25.3/pandas/' /ds/requirements_eval_tflite.txt

    pip3 install -r /ds/requirements_eval_tflite.txt  
    pip3 install -r /ds/requirements_tests.txt  
    pip3 install -r /ds/requirements_transcribe.txt

    mypip --upgrade -e /ds/

    #pip3 install $(python3 /ds/util/taskcluster.py --decoder)

    #mypip --upgrade --force-reinstall -e /ds/
        
    apt-get clean


rm -rf /var/lib/apt/lists/*
NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5
NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80
apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub 
echo "$NVIDIA_GPGKEY_SUM  cudasign.pub" | sha256sum -c --strict - && rm cudasign.pub
echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/ ./" > /etc/apt/sources.list.d/cuda.list
echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/ ./" > /etc/apt/sources.list.d/nvidia-ml.list

CUDA_VERSION=9.0.176

CUDA_PKG_VERSION=9-0=$CUDA_VERSION-1

echo "======================================>"
cat /etc/apt/sources.list.d/cuda.list
echo "<====================================="

apt-get update && apt-get install -y --no-install-recommends \
cuda-cudart-$CUDA_PKG_VERSION && \
ln -s cuda-9.0 /usr/local/cuda && \
rm -rf /var/lib/apt/lists/*

# nvidia-docker 1.0

echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
NVIDIA_VISIBLE_DEVICES=all
NVIDIA_DRIVER_CAPABILITIES=compute,utility
NVIDIA_REQUIRE_CUDA="cuda>=9.0"

NCCL_VERSION=2.3.5

apt-get update && apt-get install -y --no-install-recommends \
        cuda-libraries-$CUDA_PKG_VERSION \
        cuda-cublas-9-0=9.0.176.4-1 \
        libnccl2=$NCCL_VERSION-2+cuda9.0 && \
    apt-mark hold libnccl2 && \
    rm -rf /var/lib/apt/lists/*

apt-get update && apt-get install -y --no-install-recommends \
        cuda-libraries-dev-$CUDA_PKG_VERSION \
        cuda-nvml-dev-$CUDA_PKG_VERSION \
        cuda-minimal-build-$CUDA_PKG_VERSION \
        cuda-command-line-tools-$CUDA_PKG_VERSION \
        cuda-core-9-0=9.0.176.3-1 \
        cuda-cublas-dev-9-0=9.0.176.4-1 \
        libnccl-dev=$NCCL_VERSION-2+cuda9.0 && \
    rm -rf /var/lib/apt/lists/*

LIBRARY_PATH=/usr/local/cuda/lib64/stubs

CUDNN_VERSION=7.3.1.20

apt-get update && apt-get install -y --no-install-recommends \
            libcudnn7=$CUDNN_VERSION-1+cuda9.0 \
            libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 && \
    apt-mark hold libcudnn7 && \
    rm -rf /var/lib/apt/lists/*

# Copied from Taras

    apt-get update
    apt-get dist-upgrade -y
    apt-get -y install vim

    # build environment
    apt-get -y install wget curl bzip2 build-essential make g++ git cmake \
python python3 python-pip python3-pip locales apt apt-utils \
apt-transport-https ca-certificates vim dialog xauth libx11-dev \
libglu1-mesa-dev libnss3 libasound2 libegl1-mesa

    locale-gen en_US.UTF-8

    if [ ! -d /apps ]; then
        mkdir /apps
        mkdir /scratch
        mkdir /sw
        mkdir /projects
 #       mkdir /usr/bin/nvidia-smi
    fi

    apt-get -y install libmlx4-1 libmlx4-dev libmlx5-1 libmlx5-dev \
libibverbs1 libibverbs-dev software-properties-common
    add-apt-repository ppa:marutter/rrutter
    apt-get update
    apt-get -y install libxml2-dev libssl-dev libcurl4-openssl-dev \
libxslt1-dev r-base gdebi-core environment-modules python-virtualenv \
letsencrypt tcl libclang-dev libxslt1-dev libssl1.0.0 libclang-3.8-dev \
libclang-common-3.8-dev libclang-dev libclang1-3.8 libllvm3.8 libobjc-5-dev \
libobjc4

# This part is optional
#    cd /apps
#    if [ ! -d rstudio ]; then
#        mkdir rstudio
#        cd rstudio
#        wget -q https://s3.amazonaws.com/rstudio-ide-build/desktop/trusty/amd64/rstudio-1.2.1091-amd64.deb
#        dpkg -i rstudio-1.2.1091-amd64.deb
#        rm rstudio-1.2.1091-amd64.deb
#    fi

    locale-gen en_US en_US.UTF-8
    dpkg-reconfigure locales


# End of copy

%environment
export CUDA_VERSION=9.0.176
export CUDA_PKG_VERSION=9-0=$CUDA_VERSION-1
export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
export NVIDIA_VISIBLE_DEVICES=all
export NVIDIA_DRIVER_CAPABILITIES=compute,utility
export NVIDIA_REQUIRE_CUDA="cuda>=9.0"
export NCCL_VERSION=2.3.5
export LIBRARY_PATH=/usr/local/cuda/lib64/stubs
export CUDNN_VERSION=7.3.1.20

# Copied from Taras
    export QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
# End of copy

%runscript
exec /bin/bash "$@"
