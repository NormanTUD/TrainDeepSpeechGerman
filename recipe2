Bootstrap: docker
From: ubuntu:16.04

%labels
	maintainer "Norman Koch <norman.koch@tu-dresden.de>"
	com.nvidia.volumes.needed="nvidia_driver"
	com.nvidia.cuda.version="${CUDA_VERSION}"

%post
    ENABLE_APT_CACHE=1 # Enable if you want to cache apt-get downloads (needs apt-cacher-ng on host)
    ENABLE_PIP_CACHE=0 # Enable if you want to cache pip3 downloads (needs pypi and supervisor on host)
    HOST_IP=192.168.0.132 # Host IP for caching
    if [ $ENABLE_APT_CACHE ]; then
        echo "Acquire::http { Proxy \"http://${HOST_IP}:3142\"; };" > /etc/apt/apt.conf.d/02proxy
    fi
    
    echo '#!/bin/bash' >> /bin/mypip
    if [ $ENABLE_PIP_CACHE ]; then
        echo "pip3 install -i http://${HOST_IP}:3141/root/pypi/+simple/ --trusted-host ${HOST_IP} \$*" >> /bin/mypip
    else
        echo 'pip3 install $*' >> /bin/mypip
    fi
    chmod +x /bin/mypip

	NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5
	NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80
	CUDA_VERSION=9.0.176
	CUDA_PKG_VERSION=9-0=${CUDA_VERSION}-1
	PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
	LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
	NVIDIA_VISIBLE_DEVICES=all
	NVIDIA_DRIVER_CAPABILITIES=compute,utility
	NVIDIA_REQUIRE_CUDA="cuda>=9.0"
	NCCL_VERSION=2.3.5
	LIBRARY_PATH=/usr/local/cuda/lib64/stubs
	CUDNN_VERSION=7.3.1.20

	echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
	echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

	apt-get update
	
	apt-get -y install \
        gnupg-curl \
        software-properties-common \
        apt-transport-https

	apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
	apt-key adv --export --no-emit-version -a ${NVIDIA_GPGKEY_FPR} | tail -n +5 > cudasign.pub 
	echo "${NVIDIA_GPGKEY_SUM} cudasign.pub" | sha256sum -c --strict - && rm cudasign.pub
	echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/ ./" > /etc/apt/sources.list.d/cuda.list
	echo "deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/ ./" > /etc/apt/sources.list.d/nvidia-ml.list

	add-apt-repository ppa:marutter/rrutter

	apt-get update

	apt-get -y install \
	    alembic \
        apt \
        apt-transport-https \
        apt-utils \
        build-essential \
        ca-certificates \
        cmake \
        cuda-command-line-tools-${CUDA_PKG_VERSION} \
        cuda-core-9-0=9.0.176.3-1 \
        cuda-cublas-9-0=9.0.176.4-1 \
        cuda-cublas-dev-9-0=9.0.176.4-1 \
        cuda-cudart-${CUDA_PKG_VERSION} \
        cuda-libraries-${CUDA_PKG_VERSION} \
        cuda-libraries-dev-${CUDA_PKG_VERSION} \
        cuda-minimal-build-${CUDA_PKG_VERSION} \
        cuda-nvml-dev-${CUDA_PKG_VERSION} \
        curl \
        environment-modules \
        g++ \
        gcc \
        gdebi-core \
        git \
        libasound2 \
        libcudnn7=${CUDNN_VERSION}-1+cuda9.0 \
        libcudnn7-dev=${CUDNN_VERSION}-1+cuda9.0 \
        libcurl4-openssl-dev \
        libegl1-mesa \
        libglu1-mesa-dev \
        libibverbs1 \
        libibverbs-dev \
        libllvm3.8 \
        libmlx4-1 \
        libmlx4-dev \
        libmlx5-1 \
        libmlx5-dev \
        libnccl2=${NCCL_VERSION}-2+cuda9.0 \
        libnccl-dev=${NCCL_VERSION}-2+cuda9.0 \
        libnss3 \
        libobjc4 \
        libobjc-5-dev \
        libsox-fmt-mp3 \
        libssl1.0.0 \
        libssl-dev \
        libxml2-dev \
        libxslt1-dev \
        locales \
        make \
        python \
        python3 \
        python3-alembic \
        python3-dev \
        python3-numpy \
        python3-pip \
        python3-wheel \
        python-dev \
        python-pip \
        python-virtualenv \
        sed \
        sox \
        uuid-dev \
        vim \
        wget

	apt-mark hold libnccl2 libcudnn7
	apt-get dist-upgrade -y

	ln -s cuda-9.0 /usr/local/cuda

	locale-gen en_US en_US.UTF-8
	dpkg-reconfigure locales

	python3 -m pip install --upgrade pip setuptools

	mypip --upgrade pip==20.0.2 wheel==0.34.2 setuptools==46.1.3
	mypip absl-py==0.9.0 argparse attrdict==2.0.1 bs4 deepspeech futures==3.1.1 json-e==2.3.1 librosa networkx==2.2 optuna opuslib==2.0.0 pandas progressbar2==3.47.0 python-utils==2.3.0 pyxdg pyyaml==5.1.1 requests==2.22.0 semver six==1.13.0 slugid==1.0.7 soundfile sox tensorflow-gpu==1.15.2 virtualenv webrtcvad 

	mkdir /ds/

	git clone --depth 1 https://github.com/mozilla/DeepSpeech /ds/

	wget https://raw.githubusercontent.com/lissyx/taskcluster-github-decision/master/requirements.txt -O /ds/requirements.txt

	sed -i 's/pandas==0.25.3/pandas/' /ds/requirements_eval_tflite.txt
	sed -i 's/tensorflow/tensorflow-gpu/' /ds/training/deepspeech_training.egg-info/requires.txt
	sed -i 's/tensorflow == 1.15.2/tensorflow-gpu == 1.15.2/' /ds/setup.py

	mypip -r /ds/requirements_eval_tflite.txt 
	mypip -r /ds/requirements_tests.txt 
	mypip -r /ds/requirements_transcribe.txt

	mypip --upgrade -e /ds/

	locale-gen en_US.UTF-8

	mkdir /scratch
	mkdir /sw
	mkdir /projects

	apt-get clean
%environment
	export CUDA_VERSION=9.0.176
	export CUDA_PKG_VERSION=9-0=${CUDA_VERSION}-1
	export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
	export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64
	export NVIDIA_VISIBLE_DEVICES=all
	export NVIDIA_DRIVER_CAPABILITIES=compute,utility
	export NVIDIA_REQUIRE_CUDA="cuda>=9.0"
	export NCCL_VERSION=2.3.5
	export LIBRARY_PATH=/usr/local/cuda/lib64/stubs
	export CUDNN_VERSION=7.3.1.20

	export LANG=en_US.UTF-8
	export LC_ALL=en_US.UTF-8

%runscript
	exec /bin/bash "$@"
